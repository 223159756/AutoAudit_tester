# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, builds an image, performs a container image
# vulnerability scan with Anchore's Grype tool, and integrates the results with GitHub Advanced Security
# code scanning feature.  For more information on the Anchore scan action usage
# and parameters, see https://github.com/anchore/scan-action. For more
# information on Anchore's container image scanning tool Grype, see
# https://github.com/anchore/grype
name: Security/Vulnerability Scan 

on:
  push:
    branches: [Compliance-Engine, main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [Compliance-Engine, main]
  schedule:
    - cron: '37 20 * * 4'

permissions:
  contents: read

jobs:
  Anchore-Build-Scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      
    # --- [1] Build container image for Grype scan ---
    - name: Build the Docker image
      run: docker build -t devsecops-workflows:latest -f docker/engine.Dockerfile.

    # --- [2] Container vulnerability scan (Grype) ---
    - name: Run the Anchore Grype scan action
      uses: anchore/scan-action@v3
      id: grype_scan
      with:
        image: devsecops-workflows:latest
        fail-build: true            # Fails build on critical vulns
        severity-cutoff: critical

    - name: Upload Grype vulnerability report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.grype_scan.outputs.sarif }}

    # --- [3] Python dependency scan (Trivy) ---
    - name: Scan Python dependencies for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        format: 'sarif'
        output: 'trivy-python.sarif'
        ignore-unfixed: true

    - name: Upload Trivy Python vulnerability report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-python.sarif

    # --- [4] Node.js JS dependency scan ---
    - name: Scan Node.js dependencies for vulnerabilities
      if: hashFiles('package-lock.json') != ''
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        format: 'sarif'
        output: 'trivy-nodejs.sarif'
        ignore-unfixed: true

    - name: Upload Trivy Node.js vulnerability report
      if: hashFiles('package-lock.json') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-nodejs.sarif

    # --- [5] Dependency-Check for Java/other ecosystems ---
    # Add analogous steps for Maven/Gradle